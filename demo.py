from torchvision import models, transforms
import gradcam as gradcam
#from gradcam import GradCAM
import utils as util
#from utils import load_image, save_img_with_heatmap, check_path_exist, apply_transforms, save_heatmap
import time
import json
#from utils import get_transform
import cv2
import matplotlib.pyplot as plt
import numpy as np


# Load target iamge
image_file = 'data_examples/dog-park.jpg' # More examples exist in the examples folder
img = util.load_image(image_file)
plt.imshow(img)
plt.axis('off')
plt.show()


def saliency_visualisation(img, saliency):
    fig, ax = plt.subplots(1,2)
    img_heatmap = util.save_img_with_heatmap(img, saliency, None, style='zhou', normalise=True)
    # plt.imshow((img_heatmap[:, :, ::-1]).astype(np.uint8))
    ax[0].imshow((img_heatmap[:, :, ::-1]).astype(np.uint8))
    heatmap = util.save_heatmap(saliency, None, normalise=True)
    ax[1].imshow((heatmap[:, :, ::-1]).astype(np.uint8))
    plt.axis('off')

# Model and base visualisation method initialisation
model = 'resnet50'
target_layer = 'layer4'
model = models.__dict__[model](pretrained=True).eval()
model = model.cuda()

gc = gradcam.GradCAM(model, target_layer)
transform = util.get_transform(resize_size=224, center_crop_size=None)
x = transform(img).unsqueeze(0)
start = time.time()
saliency, _ = gc(x, None)
print('Total time: {:.2f} second'.format((time.time()-start)))
saliency = cv2.resize(np.squeeze(saliency), img.size)
print('Saliency generated by Grad-CAM')
saliency_visualisation(img, saliency)




